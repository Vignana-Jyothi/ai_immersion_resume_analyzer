# -*- coding: utf-8 -*-
"""AI-RESUME-ANALYZER

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1s5bND4U_f-QeHMCdo3XztAvr7P6Ih_os
"""

!pip install google-generativeai

import google.generativeai as genai

# Set up Gemini API key
GEMINI_API_KEY = "AIzaSyAu00T8x_eEXBHqY2WA7XTjRzZyUASWtQg"

from google.colab import files

# Upload resume and job description
uploaded_files = files.upload()

# Initialize filenames
resume_filename ='/content/drive/MyDrive/vyshnavi resume.pdf'
job_desc_filename = '/content/drive/MyDrive/job.txt'

# Identify files based on extension
for filename in uploaded_files.keys():
    if filename.lower().endswith(".pdf"):
        resume_filename = filename
    elif filename.lower().endswith(".txt"):
        job_desc_filename = filename

# Check if both files are uploaded
if resume_filename is None or job_desc_filename is None:
    print("\n‚ùå Error: Please upload both a resume (PDF) and a job description (TXT).")
else:
    print(f"\n‚úÖ Resume File: {resume_filename}")
    print(f"‚úÖ Job Description File: {job_desc_filename}")

import pdfplumber

# Function to extract text from a PDF
def extract_text_from_pdf(pdf_path):
    text = ""
    with pdfplumber.open(pdf_path) as pdf:
        for page in pdf.pages:
            extracted_text = page.extract_text()
            if extracted_text:
                text += extracted_text + "\n"
    return text.strip()

# Function to read job description (TXT file)
def read_text_file(file_path):
    with open(file_path, "r", encoding="utf-8") as file:
        return file.read().strip()

# Extract text from resume & job description
resume_text = extract_text_from_pdf(resume_filename)
job_description = read_text_file(job_desc_filename)

print("\nüìå Resume Preview:\n", resume_text[:500])  # Show first 500 characters
print("\nüìå Job Description Preview:\n", job_description[:2000])

# Define the prompt for Gemini API
prompt = f"""
I have a resume and a job description. Analyze them and return:
1. Matching skills
2. Missing skills (not in the resume but needed for the job)
3. Overall match percentage

Resume:
{resume_text}

Job Description:
{job_description}

Format the output as:
- Matching Skills: [list]
- Missing Skills: [list]
- Match Percentage: %
"""

# Call Gemini API
model = genai.GenerativeModel("gemini-pro")
response = model.generate_content(prompt)

# Print AI-generated analysis
print("\nüìå Gemini AI Analysis:\n")
print(response.text)